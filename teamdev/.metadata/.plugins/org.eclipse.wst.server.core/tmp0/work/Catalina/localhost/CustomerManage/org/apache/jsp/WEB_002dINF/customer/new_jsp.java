/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/7.0.105
 * Generated at: 2020-11-24 08:44:44 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.customer;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class new_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write('\r');
      out.write('\n');
      user.UserBean user = null;
      synchronized (session) {
        user = (user.UserBean) _jspx_page_context.getAttribute("user", javax.servlet.jsp.PageContext.SESSION_SCOPE);
        if (user == null){
          user = new user.UserBean();
          _jspx_page_context.setAttribute("user", user, javax.servlet.jsp.PageContext.SESSION_SCOPE);
        }
      }
      out.write("\r\n");
      out.write("<!doctype html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\r\n");
      out.write("<title>顧客管理</title>\r\n");
      out.write("<link rel=\"stylesheet\"\r\n");
      out.write("    href=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${pageContext.request.contextPath}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null, false));
      out.write("/style.css\">\r\n");
      out.write("</head>\r\n");
      out.write(" <h1>顧客管理</h1>\r\n");
      out.write("    <div class=\"main\">\r\n");
      out.write("        <!-- alertが作動した際にformの処理を止める -->\r\n");
      out.write("        <form action=\"CustomerServlet\" method=\"post\" onsubmit=\"return funcConfirm()\">\r\n");
      out.write("        <h2>新規登録</h2>\r\n");
      out.write("        <table border=\"1\">\r\n");
      out.write("            <tr>\r\n");
      out.write("                <td class=\"title\">氏名</td>\r\n");
      out.write("                <!-- 最大文字数を20文字に設定 -->\r\n");
      out.write("                <td><input name=\"name\" id=\"name\" type=\"text\" maxlength=\"20\"></td>\r\n");
      out.write("            </tr>\r\n");
      out.write("            <tr>\r\n");
      out.write("                <!-- 最大文字数を20文字に設定 -->\r\n");
      out.write("                <td class=\"title\">郵便番号</td>\r\n");
      out.write("                <td><input name=\"zip\" id=\"zip\" type=\"text\" maxlength=\"20\"></td>\r\n");
      out.write("            </tr>\r\n");
      out.write("            <tr>\r\n");
      out.write("                <!-- 最大文字数を100文字に設定 -->\r\n");
      out.write("                <td class=\"title\">住所1</td>\r\n");
      out.write("                <td><input name=\"address1\" id=\"address1\" type=\"text\" maxlength=\"100\"></td>\r\n");
      out.write("            </tr>\r\n");
      out.write("            <tr>\r\n");
      out.write("                <!-- 最大文字数を100文字に設定 -->\r\n");
      out.write("                <td class=\"title\">住所2</td>\r\n");
      out.write("                <td><input name=\"address2\" id=\"address2\" type=\"text\" maxlength=\"100\"></td>\r\n");
      out.write("            </tr>\r\n");
      out.write("            <tr>\r\n");
      out.write("                <!-- 最大文字数を20文字に設定 -->\r\n");
      out.write("                <td class=\"title\">TEL</td>\r\n");
      out.write("                <td><input name=\"tel\" id=\"tel\" type=\"text\" maxlength=\"20\"></td>\r\n");
      out.write("            </tr>\r\n");
      out.write("            <tr>\r\n");
      out.write("                <!-- 最大文字数を20文字に設定 -->\r\n");
      out.write("                <td class=\"title\">FAX</td>\r\n");
      out.write("                <td><input name=\"fax\" id=\"fax\" type=\"text\" maxlength=\"20\"></td>\r\n");
      out.write("            </tr>\r\n");
      out.write("            <tr>\r\n");
      out.write("                <!-- 最大文字数を100文字に設定 -->\r\n");
      out.write("                <td class=\"title\">E-mail</td>\r\n");
      out.write("                <td><input name=\"email\" id=\"email\" type=\"text\" maxlength=\"100\"></td>\r\n");
      out.write("            </tr>\r\n");
      out.write("        </table>\r\n");
      out.write("            <p>\r\n");
      out.write("                <!-- TODO実装済み ｢編集｣ボタン -->\r\n");
      out.write("                <button name=\"state\" value=\"new_confirm\">送信</button> <!-- procNewConfirmメソッドを呼び出す -->\r\n");
      out.write("                <input type=\"button\" value=\"戻る\" onclick=\"history.back()\"> <!-- 一つ前の画面に戻る -->\r\n");
      out.write("            </p>\r\n");
      out.write("        </form>\r\n");
      out.write("    </div>\r\n");
      out.write("</body>\r\n");
      out.write("<script type=\"text/javascript\">\r\n");
      out.write("    function funcConfirm() {\r\n");
      out.write("        // TODO実装済み バリデーションチェック･alertダイアログ処理\r\n");
      out.write("        const name = document.getElementById('name').value;\r\n");
      out.write("        const zip = document.getElementById('zip').value;\r\n");
      out.write("        const address1 = document.getElementById('address1').value;\r\n");
      out.write("        const address2 = document.getElementById('address2').value;\r\n");
      out.write("        const tel = document.getElementById('tel').value;\r\n");
      out.write("        const fax = document.getElementById('fax').value;\r\n");
      out.write("        const email = document.getElementById('email').value;\r\n");
      out.write("        // 入力がない場合はエラーメッセージを表示させる\r\n");
      out.write("        // address2,faxは入力なしを許容する\r\n");
      out.write("        if(name==\"\"){\r\n");
      out.write("            alert('氏名が入力されていません');\r\n");
      out.write("            return false\r\n");
      out.write("        }\r\n");
      out.write("        if(zip==\"\"){\r\n");
      out.write("            alert('郵便番号が入力されていません');\r\n");
      out.write("            return false\r\n");
      out.write("        }\r\n");
      out.write("        if(address1==\"\"){\r\n");
      out.write("            alert('住所1が入力されていません');\r\n");
      out.write("            return false\r\n");
      out.write("        }\r\n");
      out.write("        if(tel==\"\"){\r\n");
      out.write("            alert('電話番号が入力されていません');\r\n");
      out.write("            return false\r\n");
      out.write("        }\r\n");
      out.write("        if(email==\"\"){\r\n");
      out.write("            alert('E-mailが入力されていません');\r\n");
      out.write("            return false\r\n");
      out.write("        }\r\n");
      out.write("        // [\\w\\-._]+ 半角英数字-._が1文字以上\r\n");
      out.write("        // @\r\n");
      out.write("        // [\\w\\-._]+ 半角英数字-._が1文字以上\r\n");
      out.write("        // .\r\n");
      out.write("        // [A-Za-z]+$ 半角英字が1文字以上で終わる\r\n");
      out.write("        if(!email.match(/[\\w\\-._]+@[\\w\\-._]+\\.[A-Za-z]+$/)){\r\n");
      out.write("            alert('メールアドレスを正しく入力してください');\r\n");
      out.write("            return false\r\n");
      out.write("        }\r\n");
      out.write("    }\r\n");
      out.write("</script>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
